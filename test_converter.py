#!/usr/bin/env python3
"""
Tests pour valider le fonctionnement du Text to Teamwork Converter
"""

import pandas as pd
import os
from text_to_teamwork import TextToTeamworkConverter

def test_sample_conversion():
    """Test avec l'exemple fourni dans les sp√©cifications."""
    sample_text = """Campagne R√©seaux Sociaux ‚Äì Liste de T√¢ches

üìå Objectif g√©n√©ral :
Planifier et lancer une campagne de visibilit√© sur Instagram et LinkedIn.

Jalon Principal : Lancement du premier post sponsoris√©

‚úÖ Liste des T√¢ches :
1. D√©finir le concept de la campagne  
   Description : Trouver un message central et un th√®me visuel  
   Crit√®re d'acceptation : Concept valid√© par l'√©quipe

2. Cr√©er le calendrier √©ditorial  
   Description : Planifier les publications sur 4 semaines  
   D√©pendance : 1  
   Priorit√© : √âlev√©e  
   Crit√®re d'acceptation : Calendrier complet avec visuels et dates

3. R√©diger les textes des publications  
   Description : √âcrire les textes adapt√©s √† chaque plateforme  
   D√©pendance : 2  
   Crit√®re d'acceptation : Textes sans fautes et optimis√©s SEO"""
    
    print("üß™ Test 1: Conversion de l'exemple de base")
    print("=" * 50)
    
    converter = TextToTeamworkConverter()
    
    # Test de pr√©visualisation
    preview_df = converter.preview_conversion(sample_text)
    
    print(f"‚úÖ Nombre de t√¢ches d√©tect√©es : {len(preview_df)}")
    print(f"‚úÖ Nom du projet : {preview_df.iloc[0]['TASKLIST']}")
    print(f"‚úÖ Premi√®re t√¢che : {preview_df.iloc[0]['TASK']}")
    
    # V√©rifier que les priorit√©s sont correctement extraites
    priority_tasks = preview_df[preview_df['PRIORITY'] != '']
    print(f"‚úÖ T√¢ches avec priorit√© : {len(priority_tasks)}")
    
    # Test de g√©n√©ration Excel
    output_file = "test_output.xlsx"
    success = converter.convert_to_excel(sample_text, output_file)
    
    if success and os.path.exists(output_file):
        print(f"‚úÖ Fichier Excel g√©n√©r√© : {output_file}")
        file_size = os.path.getsize(output_file)
        print(f"‚úÖ Taille du fichier : {file_size} bytes")
        
        # Nettoyer
        os.remove(output_file)
        print("‚úÖ Fichier de test nettoy√©")
    else:
        print("‚ùå √âchec de g√©n√©ration du fichier Excel")
        return False
    
    print("\nüìä Aper√ßu du r√©sultat :")
    print(preview_df[['TASKLIST', 'TASK', 'PRIORITY']].to_string(index=False))
    
    return True

def test_complex_example():
    """Test avec un exemple plus complexe."""
    
    print("\n\nüß™ Test 2: Exemple complexe avec multiples sections")
    print("=" * 50)
    
    # Lire l'exemple complexe
    try:
        with open('examples/sample_text.txt', 'r', encoding='utf-8') as f:
            complex_text = f.read()
    except FileNotFoundError:
        print("‚ùå Fichier examples/sample_text.txt non trouv√©")
        return False
    
    converter = TextToTeamworkConverter()
    preview_df = converter.preview_conversion(complex_text)
    
    print(f"‚úÖ T√¢ches d√©tect√©es : {len(preview_df)}")
    print(f"‚úÖ Project name: {preview_df.iloc[0]['TASKLIST']}")
    
    # Compter les diff√©rents √©l√©ments
    priority_count = len(preview_df[preview_df['PRIORITY'] != ''])
    description_count = len(preview_df[preview_df['DESCRIPTION'] != ''])
    
    print(f"‚úÖ T√¢ches avec priorit√© : {priority_count}")
    print(f"‚úÖ T√¢ches avec description : {description_count}")
    
    # V√©rifier quelques √©l√©ments sp√©cifiques
    if "√âlev√©e" in preview_df['PRIORITY'].values:
        print("‚úÖ Priorit√© '√âlev√©e' correctement d√©tect√©e")
    
    if "D√©pendance" in preview_df['DESCRIPTION'].iloc[1]:
        print("‚úÖ D√©pendances correctement extraites")
    
    return True

def test_edge_cases():
    """Test de cas limites."""
    
    print("\n\nüß™ Test 3: Cas limites et formats vari√©s")
    print("=" * 50)
    
    edge_cases = [
        # Diff√©rents formats de num√©rotation
        """Projet Test Num√©rotation
        
        ‚Ä¢ Premi√®re t√¢che
        - Deuxi√®me t√¢che  
        ‚úÖ Troisi√®me t√¢che
        a) Quatri√®me t√¢che""",
        
        # Sans priorit√© explicite
        """Projet Simple
        
        1. T√¢che unique
           Description : Juste une description simple""",
        
        # Avec emojis et caract√®res sp√©ciaux
        """üöÄ Projet Emojis
        
        1. T√¢che avec √©mojis üéØ
           Description : Contient des √©mojis üìã et caract√®res sp√©ciaux @#$
           Priorit√© : √âlev√©e"""
    ]
    
    converter = TextToTeamworkConverter()
    
    for i, test_case in enumerate(edge_cases, 1):
        print(f"\nüìù Sous-test 3.{i}:")
        try:
            result = converter.preview_conversion(test_case)
            print(f"   ‚úÖ {len(result)} t√¢che(s) d√©tect√©e(s)")
            
            if not result.empty:
                print(f"   ‚úÖ Project: {result.iloc[0]['TASKLIST']}")
                print(f"   ‚úÖ First task: {result.iloc[0]['TASK']}")
            
        except Exception as e:
            print(f"   ‚ùå Erreur : {e}")
            
    return True

def test_performance():
    """Test de performance avec un grand nombre de t√¢ches."""
    
    print("\n\nüß™ Test 4: Performance avec 50 t√¢ches")
    print("=" * 50)
    
    # G√©n√©rer un texte avec 50 t√¢ches
    large_text = "Grand Projet Test\n\n"
    for i in range(1, 51):
        large_text += f"{i}. T√¢che num√©ro {i}\n"
        large_text += f"   Description : Description de la t√¢che {i}\n"
        if i % 5 == 0:  # Ajouter priorit√© √† chaque 5√®me t√¢che
            large_text += "   Priorit√© : √âlev√©e\n"
        large_text += "\n"
    
    import time
    
    converter = TextToTeamworkConverter()
    
    start_time = time.time()
    result = converter.preview_conversion(large_text)
    end_time = time.time()
    
    processing_time = end_time - start_time
    
    print(f"‚úÖ {len(result)} t√¢ches trait√©es")
    print(f"‚úÖ Temps de traitement : {processing_time:.3f} secondes")
    print(f"‚úÖ Performance : {len(result)/processing_time:.1f} t√¢ches/seconde")
    
    if processing_time < 5.0:  # Moins de 5 secondes acceptable
        print("‚úÖ Performance acceptable")
        return True
    else:
        print("‚ö†Ô∏è  Performance lente")
        return False

def run_all_tests():
    """Lance tous les tests."""
    
    print("üß™ SUITE DE TESTS - TEXT TO TEAMWORK CONVERTER")
    print("=" * 60)
    
    tests = [
        ("Conversion de base", test_sample_conversion),
        ("Exemple complexe", test_complex_example), 
        ("Cas limites", test_edge_cases),
        ("Performance", test_performance)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur dans {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√©
    print("\n\nüìä R√âSUM√â DES TESTS")
    print("=" * 60)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print(f"\nüèÜ R√©sultat final : {passed}/{len(results)} tests r√©ussis")
    
    if passed == len(results):
        print("üéâ Tous les tests sont pass√©s avec succ√®s !")
        return True
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©")
        return False

if __name__ == "__main__":
    run_all_tests() 